# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiGradebookEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'gradebook_entry_identifier': 'str',
        'namespace': 'str',
        'grading_period_reference': 'EdFiGradingPeriodReference',
        'section_reference': 'EdFiSectionReference',
        'date_assigned': 'date',
        'description': 'str',
        'due_date': 'date',
        'due_time': 'str',
        'gradebook_entry_type_descriptor': 'str',
        'learning_standards': 'list[EdFiGradebookEntryLearningStandard]',
        'max_points': 'float',
        'source_section_identifier': 'str',
        'title': 'str',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'gradebook_entry_identifier': 'gradebookEntryIdentifier',
        'namespace': 'namespace',
        'grading_period_reference': 'gradingPeriodReference',
        'section_reference': 'sectionReference',
        'date_assigned': 'dateAssigned',
        'description': 'description',
        'due_date': 'dueDate',
        'due_time': 'dueTime',
        'gradebook_entry_type_descriptor': 'gradebookEntryTypeDescriptor',
        'learning_standards': 'learningStandards',
        'max_points': 'maxPoints',
        'source_section_identifier': 'sourceSectionIdentifier',
        'title': 'title',
        'etag': '_etag'
    }

    def __init__(self, id=None, gradebook_entry_identifier=None, namespace=None, grading_period_reference=None, section_reference=None, date_assigned=None, description=None, due_date=None, due_time=None, gradebook_entry_type_descriptor=None, learning_standards=None, max_points=None, source_section_identifier=None, title=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiGradebookEntry - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._gradebook_entry_identifier = None
        self._namespace = None
        self._grading_period_reference = None
        self._section_reference = None
        self._date_assigned = None
        self._description = None
        self._due_date = None
        self._due_time = None
        self._gradebook_entry_type_descriptor = None
        self._learning_standards = None
        self._max_points = None
        self._source_section_identifier = None
        self._title = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.gradebook_entry_identifier = gradebook_entry_identifier
        self.namespace = namespace
        if grading_period_reference is not None:
            self.grading_period_reference = grading_period_reference
        if section_reference is not None:
            self.section_reference = section_reference
        self.date_assigned = date_assigned
        if description is not None:
            self.description = description
        if due_date is not None:
            self.due_date = due_date
        if due_time is not None:
            self.due_time = due_time
        if gradebook_entry_type_descriptor is not None:
            self.gradebook_entry_type_descriptor = gradebook_entry_type_descriptor
        if learning_standards is not None:
            self.learning_standards = learning_standards
        if max_points is not None:
            self.max_points = max_points
        self.source_section_identifier = source_section_identifier
        self.title = title
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiGradebookEntry.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiGradebookEntry.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiGradebookEntry.

          # noqa: E501

        :param id: The id of this EdFiGradebookEntry.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def gradebook_entry_identifier(self):
        """Gets the gradebook_entry_identifier of this EdFiGradebookEntry.  # noqa: E501

        A unique number or alphanumeric code assigned to a gradebook entry by the source system.  # noqa: E501

        :return: The gradebook_entry_identifier of this EdFiGradebookEntry.  # noqa: E501
        :rtype: str
        """
        return self._gradebook_entry_identifier

    @gradebook_entry_identifier.setter
    def gradebook_entry_identifier(self, gradebook_entry_identifier):
        """Sets the gradebook_entry_identifier of this EdFiGradebookEntry.

        A unique number or alphanumeric code assigned to a gradebook entry by the source system.  # noqa: E501

        :param gradebook_entry_identifier: The gradebook_entry_identifier of this EdFiGradebookEntry.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and gradebook_entry_identifier is None:
            raise ValueError("Invalid value for `gradebook_entry_identifier`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                gradebook_entry_identifier is not None and len(gradebook_entry_identifier) > 60):
            raise ValueError("Invalid value for `gradebook_entry_identifier`, length must be less than or equal to `60`")  # noqa: E501

        self._gradebook_entry_identifier = gradebook_entry_identifier

    @property
    def namespace(self):
        """Gets the namespace of this EdFiGradebookEntry.  # noqa: E501

        Namespace URI for the source of the gradebook entry.  # noqa: E501

        :return: The namespace of this EdFiGradebookEntry.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this EdFiGradebookEntry.

        Namespace URI for the source of the gradebook entry.  # noqa: E501

        :param namespace: The namespace of this EdFiGradebookEntry.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                namespace is not None and len(namespace) > 255):
            raise ValueError("Invalid value for `namespace`, length must be less than or equal to `255`")  # noqa: E501

        self._namespace = namespace

    @property
    def grading_period_reference(self):
        """Gets the grading_period_reference of this EdFiGradebookEntry.  # noqa: E501


        :return: The grading_period_reference of this EdFiGradebookEntry.  # noqa: E501
        :rtype: EdFiGradingPeriodReference
        """
        return self._grading_period_reference

    @grading_period_reference.setter
    def grading_period_reference(self, grading_period_reference):
        """Sets the grading_period_reference of this EdFiGradebookEntry.


        :param grading_period_reference: The grading_period_reference of this EdFiGradebookEntry.  # noqa: E501
        :type: EdFiGradingPeriodReference
        """

        self._grading_period_reference = grading_period_reference

    @property
    def section_reference(self):
        """Gets the section_reference of this EdFiGradebookEntry.  # noqa: E501


        :return: The section_reference of this EdFiGradebookEntry.  # noqa: E501
        :rtype: EdFiSectionReference
        """
        return self._section_reference

    @section_reference.setter
    def section_reference(self, section_reference):
        """Sets the section_reference of this EdFiGradebookEntry.


        :param section_reference: The section_reference of this EdFiGradebookEntry.  # noqa: E501
        :type: EdFiSectionReference
        """

        self._section_reference = section_reference

    @property
    def date_assigned(self):
        """Gets the date_assigned of this EdFiGradebookEntry.  # noqa: E501

        The date the assignment, homework, or assessment was assigned or executed.  # noqa: E501

        :return: The date_assigned of this EdFiGradebookEntry.  # noqa: E501
        :rtype: date
        """
        return self._date_assigned

    @date_assigned.setter
    def date_assigned(self, date_assigned):
        """Sets the date_assigned of this EdFiGradebookEntry.

        The date the assignment, homework, or assessment was assigned or executed.  # noqa: E501

        :param date_assigned: The date_assigned of this EdFiGradebookEntry.  # noqa: E501
        :type: date
        """
        if self._configuration.client_side_validation and date_assigned is None:
            raise ValueError("Invalid value for `date_assigned`, must not be `None`")  # noqa: E501

        self._date_assigned = date_assigned

    @property
    def description(self):
        """Gets the description of this EdFiGradebookEntry.  # noqa: E501

        A description of the assignment, homework, or classroom assessment.  # noqa: E501

        :return: The description of this EdFiGradebookEntry.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EdFiGradebookEntry.

        A description of the assignment, homework, or classroom assessment.  # noqa: E501

        :param description: The description of this EdFiGradebookEntry.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                description is not None and len(description) > 1024):
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1024`")  # noqa: E501

        self._description = description

    @property
    def due_date(self):
        """Gets the due_date of this EdFiGradebookEntry.  # noqa: E501

        The date the assignment, homework, or assessment is due.  # noqa: E501

        :return: The due_date of this EdFiGradebookEntry.  # noqa: E501
        :rtype: date
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this EdFiGradebookEntry.

        The date the assignment, homework, or assessment is due.  # noqa: E501

        :param due_date: The due_date of this EdFiGradebookEntry.  # noqa: E501
        :type: date
        """

        self._due_date = due_date

    @property
    def due_time(self):
        """Gets the due_time of this EdFiGradebookEntry.  # noqa: E501

        The time the assignment, homework, or assessment is due.  # noqa: E501

        :return: The due_time of this EdFiGradebookEntry.  # noqa: E501
        :rtype: str
        """
        return self._due_time

    @due_time.setter
    def due_time(self, due_time):
        """Sets the due_time of this EdFiGradebookEntry.

        The time the assignment, homework, or assessment is due.  # noqa: E501

        :param due_time: The due_time of this EdFiGradebookEntry.  # noqa: E501
        :type: str
        """

        self._due_time = due_time

    @property
    def gradebook_entry_type_descriptor(self):
        """Gets the gradebook_entry_type_descriptor of this EdFiGradebookEntry.  # noqa: E501

        The type of the gradebook entry.  # noqa: E501

        :return: The gradebook_entry_type_descriptor of this EdFiGradebookEntry.  # noqa: E501
        :rtype: str
        """
        return self._gradebook_entry_type_descriptor

    @gradebook_entry_type_descriptor.setter
    def gradebook_entry_type_descriptor(self, gradebook_entry_type_descriptor):
        """Sets the gradebook_entry_type_descriptor of this EdFiGradebookEntry.

        The type of the gradebook entry.  # noqa: E501

        :param gradebook_entry_type_descriptor: The gradebook_entry_type_descriptor of this EdFiGradebookEntry.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                gradebook_entry_type_descriptor is not None and len(gradebook_entry_type_descriptor) > 306):
            raise ValueError("Invalid value for `gradebook_entry_type_descriptor`, length must be less than or equal to `306`")  # noqa: E501

        self._gradebook_entry_type_descriptor = gradebook_entry_type_descriptor

    @property
    def learning_standards(self):
        """Gets the learning_standards of this EdFiGradebookEntry.  # noqa: E501

        An unordered collection of gradebookEntryLearningStandards. LearningStandard(s) associated with the gradebook entry.  # noqa: E501

        :return: The learning_standards of this EdFiGradebookEntry.  # noqa: E501
        :rtype: list[EdFiGradebookEntryLearningStandard]
        """
        return self._learning_standards

    @learning_standards.setter
    def learning_standards(self, learning_standards):
        """Sets the learning_standards of this EdFiGradebookEntry.

        An unordered collection of gradebookEntryLearningStandards. LearningStandard(s) associated with the gradebook entry.  # noqa: E501

        :param learning_standards: The learning_standards of this EdFiGradebookEntry.  # noqa: E501
        :type: list[EdFiGradebookEntryLearningStandard]
        """

        self._learning_standards = learning_standards

    @property
    def max_points(self):
        """Gets the max_points of this EdFiGradebookEntry.  # noqa: E501

        The maximum number of points  that can be earned for the submission.  # noqa: E501

        :return: The max_points of this EdFiGradebookEntry.  # noqa: E501
        :rtype: float
        """
        return self._max_points

    @max_points.setter
    def max_points(self, max_points):
        """Sets the max_points of this EdFiGradebookEntry.

        The maximum number of points  that can be earned for the submission.  # noqa: E501

        :param max_points: The max_points of this EdFiGradebookEntry.  # noqa: E501
        :type: float
        """

        self._max_points = max_points

    @property
    def source_section_identifier(self):
        """Gets the source_section_identifier of this EdFiGradebookEntry.  # noqa: E501

        The local identifier assigned to a section.  # noqa: E501

        :return: The source_section_identifier of this EdFiGradebookEntry.  # noqa: E501
        :rtype: str
        """
        return self._source_section_identifier

    @source_section_identifier.setter
    def source_section_identifier(self, source_section_identifier):
        """Sets the source_section_identifier of this EdFiGradebookEntry.

        The local identifier assigned to a section.  # noqa: E501

        :param source_section_identifier: The source_section_identifier of this EdFiGradebookEntry.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and source_section_identifier is None:
            raise ValueError("Invalid value for `source_section_identifier`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                source_section_identifier is not None and len(source_section_identifier) > 255):
            raise ValueError("Invalid value for `source_section_identifier`, length must be less than or equal to `255`")  # noqa: E501

        self._source_section_identifier = source_section_identifier

    @property
    def title(self):
        """Gets the title of this EdFiGradebookEntry.  # noqa: E501

        The name or title of the activity to be recorded in the gradebook entry.  # noqa: E501

        :return: The title of this EdFiGradebookEntry.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EdFiGradebookEntry.

        The name or title of the activity to be recorded in the gradebook entry.  # noqa: E501

        :param title: The title of this EdFiGradebookEntry.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                title is not None and len(title) > 100):
            raise ValueError("Invalid value for `title`, length must be less than or equal to `100`")  # noqa: E501

        self._title = title

    @property
    def etag(self):
        """Gets the etag of this EdFiGradebookEntry.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiGradebookEntry.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiGradebookEntry.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiGradebookEntry.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiGradebookEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiGradebookEntry):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiGradebookEntry):
            return True

        return self.to_dict() != other.to_dict()
