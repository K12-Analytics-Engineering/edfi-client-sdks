# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiDescriptorMapping(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'mapped_namespace': 'str',
        'mapped_value': 'str',
        'namespace': 'str',
        'value': 'str',
        'model_entities': 'list[EdFiDescriptorMappingModelEntity]',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'mapped_namespace': 'mappedNamespace',
        'mapped_value': 'mappedValue',
        'namespace': 'namespace',
        'value': 'value',
        'model_entities': 'modelEntities',
        'etag': '_etag'
    }

    def __init__(self, id=None, mapped_namespace=None, mapped_value=None, namespace=None, value=None, model_entities=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiDescriptorMapping - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._mapped_namespace = None
        self._mapped_value = None
        self._namespace = None
        self._value = None
        self._model_entities = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.mapped_namespace = mapped_namespace
        self.mapped_value = mapped_value
        self.namespace = namespace
        self.value = value
        if model_entities is not None:
            self.model_entities = model_entities
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiDescriptorMapping.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiDescriptorMapping.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiDescriptorMapping.

          # noqa: E501

        :param id: The id of this EdFiDescriptorMapping.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def mapped_namespace(self):
        """Gets the mapped_namespace of this EdFiDescriptorMapping.  # noqa: E501

        The namespace of the descriptor value to which the from descriptor value is mapped to.  # noqa: E501

        :return: The mapped_namespace of this EdFiDescriptorMapping.  # noqa: E501
        :rtype: str
        """
        return self._mapped_namespace

    @mapped_namespace.setter
    def mapped_namespace(self, mapped_namespace):
        """Sets the mapped_namespace of this EdFiDescriptorMapping.

        The namespace of the descriptor value to which the from descriptor value is mapped to.  # noqa: E501

        :param mapped_namespace: The mapped_namespace of this EdFiDescriptorMapping.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and mapped_namespace is None:
            raise ValueError("Invalid value for `mapped_namespace`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                mapped_namespace is not None and len(mapped_namespace) > 255):
            raise ValueError("Invalid value for `mapped_namespace`, length must be less than or equal to `255`")  # noqa: E501

        self._mapped_namespace = mapped_namespace

    @property
    def mapped_value(self):
        """Gets the mapped_value of this EdFiDescriptorMapping.  # noqa: E501

        The descriptor value to which the from descriptor value is being mapped to.  # noqa: E501

        :return: The mapped_value of this EdFiDescriptorMapping.  # noqa: E501
        :rtype: str
        """
        return self._mapped_value

    @mapped_value.setter
    def mapped_value(self, mapped_value):
        """Sets the mapped_value of this EdFiDescriptorMapping.

        The descriptor value to which the from descriptor value is being mapped to.  # noqa: E501

        :param mapped_value: The mapped_value of this EdFiDescriptorMapping.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and mapped_value is None:
            raise ValueError("Invalid value for `mapped_value`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                mapped_value is not None and len(mapped_value) > 50):
            raise ValueError("Invalid value for `mapped_value`, length must be less than or equal to `50`")  # noqa: E501

        self._mapped_value = mapped_value

    @property
    def namespace(self):
        """Gets the namespace of this EdFiDescriptorMapping.  # noqa: E501

        The namespace of the descriptor value that is being mapped to another value.  # noqa: E501

        :return: The namespace of this EdFiDescriptorMapping.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this EdFiDescriptorMapping.

        The namespace of the descriptor value that is being mapped to another value.  # noqa: E501

        :param namespace: The namespace of this EdFiDescriptorMapping.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                namespace is not None and len(namespace) > 255):
            raise ValueError("Invalid value for `namespace`, length must be less than or equal to `255`")  # noqa: E501

        self._namespace = namespace

    @property
    def value(self):
        """Gets the value of this EdFiDescriptorMapping.  # noqa: E501

        The descriptor value that is being mapped to another value.  # noqa: E501

        :return: The value of this EdFiDescriptorMapping.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this EdFiDescriptorMapping.

        The descriptor value that is being mapped to another value.  # noqa: E501

        :param value: The value of this EdFiDescriptorMapping.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                value is not None and len(value) > 50):
            raise ValueError("Invalid value for `value`, length must be less than or equal to `50`")  # noqa: E501

        self._value = value

    @property
    def model_entities(self):
        """Gets the model_entities of this EdFiDescriptorMapping.  # noqa: E501

        An unordered collection of descriptorMappingModelEntities. The resources for which the descriptor mapping applies. If empty, the mapping is assumed to be applicable to all resources in which the descriptor appears.  # noqa: E501

        :return: The model_entities of this EdFiDescriptorMapping.  # noqa: E501
        :rtype: list[EdFiDescriptorMappingModelEntity]
        """
        return self._model_entities

    @model_entities.setter
    def model_entities(self, model_entities):
        """Sets the model_entities of this EdFiDescriptorMapping.

        An unordered collection of descriptorMappingModelEntities. The resources for which the descriptor mapping applies. If empty, the mapping is assumed to be applicable to all resources in which the descriptor appears.  # noqa: E501

        :param model_entities: The model_entities of this EdFiDescriptorMapping.  # noqa: E501
        :type: list[EdFiDescriptorMappingModelEntity]
        """

        self._model_entities = model_entities

    @property
    def etag(self):
        """Gets the etag of this EdFiDescriptorMapping.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiDescriptorMapping.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiDescriptorMapping.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiDescriptorMapping.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiDescriptorMapping, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiDescriptorMapping):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiDescriptorMapping):
            return True

        return self.to_dict() != other.to_dict()
