# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EdFiProgramDimension(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'code': 'str',
        'fiscal_year': 'int',
        'code_name': 'str',
        'reporting_tags': 'list[EdFiProgramDimensionReportingTag]',
        'etag': 'str'
    }

    attribute_map = {
        'id': 'id',
        'code': 'code',
        'fiscal_year': 'fiscalYear',
        'code_name': 'codeName',
        'reporting_tags': 'reportingTags',
        'etag': '_etag'
    }

    def __init__(self, id=None, code=None, fiscal_year=None, code_name=None, reporting_tags=None, etag=None, _configuration=None):  # noqa: E501
        """EdFiProgramDimension - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._code = None
        self._fiscal_year = None
        self._code_name = None
        self._reporting_tags = None
        self._etag = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.code = code
        self.fiscal_year = fiscal_year
        if code_name is not None:
            self.code_name = code_name
        if reporting_tags is not None:
            self.reporting_tags = reporting_tags
        if etag is not None:
            self.etag = etag

    @property
    def id(self):
        """Gets the id of this EdFiProgramDimension.  # noqa: E501

          # noqa: E501

        :return: The id of this EdFiProgramDimension.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EdFiProgramDimension.

          # noqa: E501

        :param id: The id of this EdFiProgramDimension.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def code(self):
        """Gets the code of this EdFiProgramDimension.  # noqa: E501

        The code representation of the account program dimension.  # noqa: E501

        :return: The code of this EdFiProgramDimension.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this EdFiProgramDimension.

        The code representation of the account program dimension.  # noqa: E501

        :param code: The code of this EdFiProgramDimension.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                code is not None and len(code) > 16):
            raise ValueError("Invalid value for `code`, length must be less than or equal to `16`")  # noqa: E501

        self._code = code

    @property
    def fiscal_year(self):
        """Gets the fiscal_year of this EdFiProgramDimension.  # noqa: E501

        The fiscal year for which the account program dimension is valid.  # noqa: E501

        :return: The fiscal_year of this EdFiProgramDimension.  # noqa: E501
        :rtype: int
        """
        return self._fiscal_year

    @fiscal_year.setter
    def fiscal_year(self, fiscal_year):
        """Sets the fiscal_year of this EdFiProgramDimension.

        The fiscal year for which the account program dimension is valid.  # noqa: E501

        :param fiscal_year: The fiscal_year of this EdFiProgramDimension.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and fiscal_year is None:
            raise ValueError("Invalid value for `fiscal_year`, must not be `None`")  # noqa: E501

        self._fiscal_year = fiscal_year

    @property
    def code_name(self):
        """Gets the code_name of this EdFiProgramDimension.  # noqa: E501

        A description of the account program dimension.  # noqa: E501

        :return: The code_name of this EdFiProgramDimension.  # noqa: E501
        :rtype: str
        """
        return self._code_name

    @code_name.setter
    def code_name(self, code_name):
        """Sets the code_name of this EdFiProgramDimension.

        A description of the account program dimension.  # noqa: E501

        :param code_name: The code_name of this EdFiProgramDimension.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                code_name is not None and len(code_name) > 100):
            raise ValueError("Invalid value for `code_name`, length must be less than or equal to `100`")  # noqa: E501

        self._code_name = code_name

    @property
    def reporting_tags(self):
        """Gets the reporting_tags of this EdFiProgramDimension.  # noqa: E501

        An unordered collection of programDimensionReportingTags. Optional tag for accountability reporting.  # noqa: E501

        :return: The reporting_tags of this EdFiProgramDimension.  # noqa: E501
        :rtype: list[EdFiProgramDimensionReportingTag]
        """
        return self._reporting_tags

    @reporting_tags.setter
    def reporting_tags(self, reporting_tags):
        """Sets the reporting_tags of this EdFiProgramDimension.

        An unordered collection of programDimensionReportingTags. Optional tag for accountability reporting.  # noqa: E501

        :param reporting_tags: The reporting_tags of this EdFiProgramDimension.  # noqa: E501
        :type: list[EdFiProgramDimensionReportingTag]
        """

        self._reporting_tags = reporting_tags

    @property
    def etag(self):
        """Gets the etag of this EdFiProgramDimension.  # noqa: E501

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :return: The etag of this EdFiProgramDimension.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this EdFiProgramDimension.

        A unique system-generated value that identifies the version of the resource.  # noqa: E501

        :param etag: The etag of this EdFiProgramDimension.  # noqa: E501
        :type: str
        """

        self._etag = etag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EdFiProgramDimension, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EdFiProgramDimension):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EdFiProgramDimension):
            return True

        return self.to_dict() != other.to_dict()
