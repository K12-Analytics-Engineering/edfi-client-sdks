# coding: utf-8

"""
    Ed-Fi Operational Data Store API

    The Ed-Fi ODS / API enables applications to read and write education data stored in an Ed-Fi ODS through a secure REST interface.  ***  > *Note: Consumers of ODS / API information should sanitize all data for display and storage. The ODS / API provides reasonable safeguards against cross-site scripting attacks and other malicious content, but the platform does not and cannot guarantee that the data it contains is free of all potentially harmful content.*  ***   # noqa: E501

    OpenAPI spec version: 3
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TrackedChangesEdFiGradebookEntryKey(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gradebook_entry_identifier': 'str',
        'namespace': 'str'
    }

    attribute_map = {
        'gradebook_entry_identifier': 'gradebookEntryIdentifier',
        'namespace': 'namespace'
    }

    def __init__(self, gradebook_entry_identifier=None, namespace=None, _configuration=None):  # noqa: E501
        """TrackedChangesEdFiGradebookEntryKey - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._gradebook_entry_identifier = None
        self._namespace = None
        self.discriminator = None

        if gradebook_entry_identifier is not None:
            self.gradebook_entry_identifier = gradebook_entry_identifier
        if namespace is not None:
            self.namespace = namespace

    @property
    def gradebook_entry_identifier(self):
        """Gets the gradebook_entry_identifier of this TrackedChangesEdFiGradebookEntryKey.  # noqa: E501

        A unique number or alphanumeric code assigned to a gradebook entry by the source system.  # noqa: E501

        :return: The gradebook_entry_identifier of this TrackedChangesEdFiGradebookEntryKey.  # noqa: E501
        :rtype: str
        """
        return self._gradebook_entry_identifier

    @gradebook_entry_identifier.setter
    def gradebook_entry_identifier(self, gradebook_entry_identifier):
        """Sets the gradebook_entry_identifier of this TrackedChangesEdFiGradebookEntryKey.

        A unique number or alphanumeric code assigned to a gradebook entry by the source system.  # noqa: E501

        :param gradebook_entry_identifier: The gradebook_entry_identifier of this TrackedChangesEdFiGradebookEntryKey.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                gradebook_entry_identifier is not None and len(gradebook_entry_identifier) > 60):
            raise ValueError("Invalid value for `gradebook_entry_identifier`, length must be less than or equal to `60`")  # noqa: E501

        self._gradebook_entry_identifier = gradebook_entry_identifier

    @property
    def namespace(self):
        """Gets the namespace of this TrackedChangesEdFiGradebookEntryKey.  # noqa: E501

        Namespace URI for the source of the gradebook entry.  # noqa: E501

        :return: The namespace of this TrackedChangesEdFiGradebookEntryKey.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this TrackedChangesEdFiGradebookEntryKey.

        Namespace URI for the source of the gradebook entry.  # noqa: E501

        :param namespace: The namespace of this TrackedChangesEdFiGradebookEntryKey.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                namespace is not None and len(namespace) > 255):
            raise ValueError("Invalid value for `namespace`, length must be less than or equal to `255`")  # noqa: E501

        self._namespace = namespace

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TrackedChangesEdFiGradebookEntryKey, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TrackedChangesEdFiGradebookEntryKey):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TrackedChangesEdFiGradebookEntryKey):
            return True

        return self.to_dict() != other.to_dict()
